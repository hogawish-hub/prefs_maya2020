{
    "docs": [
        {
            "location": "/index.html", 
            "text": "ngSkinTools user guide\n\n\n \nngSkinTools\n is a skinning plugin for Autodesk Maya, introducing new concepts to character skinning such as layers, any-pose-mirroring, enhanced paint brushes, true smoothing, and more.\n\n\n \n\n\n\nQuick Links\n\n\n\n\nngskintools.com\n - project homepage;\n\n\nQuick start\n - a guide for new users;\n\n\nngSkinTools user list\n at Google Groups.\n\n\nContact form\n - if you feel like sending an author direct message.\n\n\nIssue tracker (pivotaltracker.com)\n - where further development gets planned.\n\n\nngSkinTools API guide\n\n\n\n\nInstalling\n\n\n\n\nNote\n\n\nIf you have ngSkinTools older than 1.0.965, please remove it first. Delete ngSkinTools module file from your \nuser home\n/maya/\nmaya version\n/modules\n, and all other files from the installation location (that's \nC:\\program files\n for Windows users).\n\n\n\n\nSince version 1.0.965, ngSkinTools installation uses Autodesk's autoloader system (as described in \nAutodesk App Store guide\n and \nCyrille's blog\n).\n\n\nThis means that installation locations are:\n\n\n\n\nWindows - \nC:\\ProgramData\\Autodesk\\ApplicationPlugins\\ngskintools\n (unless your \n%ProgramData%\n environment variable is different)\n\n\nOSX - \n/Users/Shared/Autodesk/ApplicationAddins/ngskintools\n\n\nLinux - \n~/Autodesk/ApplicationPlugins/ngskintools\n (single user) or \n/usr/autodesk/ApplicationPlugins/ngskintools\n (all users / root)\n\n\n\n\nSo far it seems like these locations are not configurable (\nlet me know\n if you discover otherwise).\n\n\nUsing autoloader system, nothing needs to be configured additionally from Maya's point of view. Maya scans autoloader locations for plugins at startup, and configures each discovered plugin automatically. For ngSkinTools, a shelf button to open UI is created in \"Custom\" tab.\n\n\nContinue to \nQuick start\n for first steps with the plugin.\n\n\n\n\nNote\n\n\nIf you really need to manually configure installation, you need three things (assuming you've got some experience setting up a Maya plugin):\n\n\n\n\nAdd \nngskintools\\Contents\\plug-ins\\windows-maya2017-64bit\n to \nMAYA_PLUG_IN_PATH\n (use particular plugin path for your OS/Maya version);\n\n\nAdd \nngskintools\\Contents\\scripts\n to \nPYTHONPATH\n;\n\n\nAdd ngSkinTools shelf button with python code: \nfrom ngSkinTools.ui.mainwindow import MainWindow; MainWindow.open()\n\n\n\n\n\n\nGetting help\n\n\nIf you have a problem, a question, a feature request, let me know. Your feedback is what drives the project forward!\n\n\nFrequently Asked Questions\n\n\nGot a question? Checkout \nfrequently asked questions\n list - maybe it's already been answered?\n\n\nMailing list\n\n\nngSkinTools user list\n at Google Groups.\n\n\nThis is the most preferred way to ask new questions and provide feedback. You might need a google ID for this, though you can contact me personally if you just want to be added to the group with a non-google email:\n\n\nContact me personally\n\n\nIf you're feeling shy or just want to contact me personally, \nuse this contact form instead\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/index.html#ngskintools-user-guide", 
            "text": "ngSkinTools  is a skinning plugin for Autodesk Maya, introducing new concepts to character skinning such as layers, any-pose-mirroring, enhanced paint brushes, true smoothing, and more.", 
            "title": "ngSkinTools user guide"
        }, 
        {
            "location": "/index.html#quick-links", 
            "text": "ngskintools.com  - project homepage;  Quick start  - a guide for new users;  ngSkinTools user list  at Google Groups.  Contact form  - if you feel like sending an author direct message.  Issue tracker (pivotaltracker.com)  - where further development gets planned.  ngSkinTools API guide", 
            "title": "Quick Links"
        }, 
        {
            "location": "/index.html#installing", 
            "text": "Note  If you have ngSkinTools older than 1.0.965, please remove it first. Delete ngSkinTools module file from your  user home /maya/ maya version /modules , and all other files from the installation location (that's  C:\\program files  for Windows users).   Since version 1.0.965, ngSkinTools installation uses Autodesk's autoloader system (as described in  Autodesk App Store guide  and  Cyrille's blog ).  This means that installation locations are:   Windows -  C:\\ProgramData\\Autodesk\\ApplicationPlugins\\ngskintools  (unless your  %ProgramData%  environment variable is different)  OSX -  /Users/Shared/Autodesk/ApplicationAddins/ngskintools  Linux -  ~/Autodesk/ApplicationPlugins/ngskintools  (single user) or  /usr/autodesk/ApplicationPlugins/ngskintools  (all users / root)   So far it seems like these locations are not configurable ( let me know  if you discover otherwise).  Using autoloader system, nothing needs to be configured additionally from Maya's point of view. Maya scans autoloader locations for plugins at startup, and configures each discovered plugin automatically. For ngSkinTools, a shelf button to open UI is created in \"Custom\" tab.  Continue to  Quick start  for first steps with the plugin.   Note  If you really need to manually configure installation, you need three things (assuming you've got some experience setting up a Maya plugin):   Add  ngskintools\\Contents\\plug-ins\\windows-maya2017-64bit  to  MAYA_PLUG_IN_PATH  (use particular plugin path for your OS/Maya version);  Add  ngskintools\\Contents\\scripts  to  PYTHONPATH ;  Add ngSkinTools shelf button with python code:  from ngSkinTools.ui.mainwindow import MainWindow; MainWindow.open()", 
            "title": "Installing"
        }, 
        {
            "location": "/index.html#getting-help", 
            "text": "If you have a problem, a question, a feature request, let me know. Your feedback is what drives the project forward!", 
            "title": "Getting help"
        }, 
        {
            "location": "/index.html#frequently-asked-questions", 
            "text": "Got a question? Checkout  frequently asked questions  list - maybe it's already been answered?", 
            "title": "Frequently Asked Questions"
        }, 
        {
            "location": "/index.html#mailing-list", 
            "text": "ngSkinTools user list  at Google Groups.  This is the most preferred way to ask new questions and provide feedback. You might need a google ID for this, though you can contact me personally if you just want to be added to the group with a non-google email:", 
            "title": "Mailing list"
        }, 
        {
            "location": "/index.html#contact-me-personally", 
            "text": "If you're feeling shy or just want to contact me personally,  use this contact form instead .", 
            "title": "Contact me personally"
        }, 
        {
            "location": "/quickstart/index.html", 
            "text": "Quick Start\n\n\nThis guide, aimed for new ngSkinTools users, explains how you could start taking first steps when using the plugin. This is not an in-depth guide nor a highlight of best features of plugin - instead, just some ngSkinTools workflow basics to get started with.\n\n\nIf you prefer video tutorial instead, \nthere's one available as well\n, covering pretty much the same thing.\n\n\nIt is assumed that the reader is already somewhat familiar with rigging and skinning essentials using standard Maya tools. \n\n\nGet your rig ready\n\n\n\n\nTo begin using ngSkinTools, you should already have a smooth-skin-bound mesh. Either open one of your existing rigs, or load up a new mesh and bind it to joints using smooth bind (\nSkin \n Bind Skin \n Smooth Bind\n).\n\n\n\n\nWarning\n\n\nYou might have other deformers in deformation chain after skin cluster - for example, poly smooth node; if any of them change vertex order in the mesh, turn those off.\n\n\n\n\nInitialize skinning layers\n\n\nSelect your mesh and open ngSkinTools (\"ngSkinTools\" button in \"Custom\" shelf)\n\n\n\nMost of the UI will be disabled as plugin needs some more additional setup to be done before you can use all the features of ngSkinTools on your mesh. Select the mesh you want to skin, an you should see something similar to this:\n\n\n\n\nThis shows the discovered mesh shape from your selection, and skin cluster that is attached to it. Click \"Initialize Skinning Layers\" button.\n\n\n\n\nNote\n\n\nFor the curious, this attaches a temporary node in the scene that will store skinning layers information for the selected skin cluster. \n\n\n\n\nThe UI changes to this:\n\n\n\n\nThe list on the left is layers. This is where you select active layer, and can also add/remove/arrange them. After initializing ngSkinTools layers for the first time, a single layer will be created, which has all the original weights on the skin cluster. \n\n\nOn the right influences (joints) are being listed. This list is used to select influence to paint weights for, or a group of influences for some other operation.\n\n\nStart painting weights\n\n\nPainting is  similar to how it is done with \nPaint Skin Weights Tool\n in Maya. Click \nPaint\n button at the bottom of \nPaint\n tab to start the paint tool.\n\n\n\n\nNow, select a layer in layer list, an influence in influences list, and, using one of the paint tools (Replace, Add, Scale or Smooth) start editing weights. Paint settings are somewhat identical to what they are in standard \nPaint Skin Weights Tool\n, but you'll notice a few differences:\n\n\n\n\nBrush intensity is saved and restored separately for each paint mode. It makes more sense that for \nScale\n you would usually use a large value, something like \n.9\n, while \nAdd\n better works with small increments, like \n.1\n.\n\n\nSmoothing brush operates operates on all influences in a vertex. You should notice a very intuitive response from the brush.\n\n\n\n\nSee \nPaint Tab\n if you need more assistance in understanding this UI.\n\n\nAdd more layers\n\n\nSkinning layers is a very powerful tool. Just like in your favorite image editing application, layers will allow you to paint in multiple \"planes\". Paint spine weights in one layer, arms on the other, and ngSkinTools will combine this real-time into single weights \"image\" for skinCluster to use.\n\n\nAs we're just getting the first feel here, just create a few of them (right-click layers list and choose \nNew Layer\n), without worrying if you need them or not.\n\n\n\n\nNow, try experimenting. What happens if you flood all weights to \njoint1\n on the lower layer, and paint on some vertices  to the \njoint2\n in the upper layer? Not really impressive yet, \njoint2\n simply overrides \njoint1\n. \n\n\nThe real magic happens when you go back to lower layer, and add some weights for \njoint3\n. Weights will be shared between \njoint1\n and \njoint3\n, but then previously painted \njoint2\n will override areas where it's painted.\n\n\nNow try doing something more practical. In lowest layer, flood everything to just spine joints. In higher layer, paint just shoulders. Add few more layers for arms, hips, legs, props.. Before you do though, have a quick look at \ncontrolling layer transparency\n.\n\n\nMirror weights\n\n\nMirroring is a bit different in ngSkinTools. The process is divided into two parts: \n\n\n\n\nInitializing mirror info\n: this is where plugin memorizes how vertices and influences on one side map to the other side. You only have to do this once, unless you add more influences later;\n\n\nMirroring weights\n: because plugin already knows how to find left and right side, you can repeat this as many times as you want in any pose.     \n\n\n\n\nTo initialize mirror info, put your rig into neutral position, go to \nMirror\n tab and click \nInitialize\n. In the dialog that opens, click \nInitialize\n to accept default options.\nTo begin using mirror function (via \nMirror\n button in \nPaint\n tab, or from the \nMirror\n tab), you have to initialize mirror information first. \n\n\n\n\nPut your rig into neutral position, go to \nMirror\n tab and click \nInitialize\n. In the dialog that opens, click \nInitialize\n to accept default options.\n\n\n\n\nNote\n\n\nEven though default options might work for basic rigs, there are quite a few features for controlling mirror behavior in \nInitialize Mirror\n window. See \nMirror Tab\n for details.\n\n\n\n\nMirror is now enabled for the mesh. Choose which direction to mirror (from left to right side or vice versa), select layers to mirror (you can select multiple layers holding Shift or Ctrl buttons), and click \nMirror\n.\n\n\nSee \nMirror Tab\n section for more detailed explanations of mirroring options.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quickstart/index.html#quick-start", 
            "text": "This guide, aimed for new ngSkinTools users, explains how you could start taking first steps when using the plugin. This is not an in-depth guide nor a highlight of best features of plugin - instead, just some ngSkinTools workflow basics to get started with.  If you prefer video tutorial instead,  there's one available as well , covering pretty much the same thing.  It is assumed that the reader is already somewhat familiar with rigging and skinning essentials using standard Maya tools.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/quickstart/index.html#get-your-rig-ready", 
            "text": "To begin using ngSkinTools, you should already have a smooth-skin-bound mesh. Either open one of your existing rigs, or load up a new mesh and bind it to joints using smooth bind ( Skin   Bind Skin   Smooth Bind ).   Warning  You might have other deformers in deformation chain after skin cluster - for example, poly smooth node; if any of them change vertex order in the mesh, turn those off.", 
            "title": "Get your rig ready"
        }, 
        {
            "location": "/quickstart/index.html#initialize-skinning-layers", 
            "text": "Select your mesh and open ngSkinTools (\"ngSkinTools\" button in \"Custom\" shelf)  Most of the UI will be disabled as plugin needs some more additional setup to be done before you can use all the features of ngSkinTools on your mesh. Select the mesh you want to skin, an you should see something similar to this:   This shows the discovered mesh shape from your selection, and skin cluster that is attached to it. Click \"Initialize Skinning Layers\" button.   Note  For the curious, this attaches a temporary node in the scene that will store skinning layers information for the selected skin cluster.    The UI changes to this:   The list on the left is layers. This is where you select active layer, and can also add/remove/arrange them. After initializing ngSkinTools layers for the first time, a single layer will be created, which has all the original weights on the skin cluster.   On the right influences (joints) are being listed. This list is used to select influence to paint weights for, or a group of influences for some other operation.", 
            "title": "Initialize skinning layers"
        }, 
        {
            "location": "/quickstart/index.html#start-painting-weights", 
            "text": "Painting is  similar to how it is done with  Paint Skin Weights Tool  in Maya. Click  Paint  button at the bottom of  Paint  tab to start the paint tool.   Now, select a layer in layer list, an influence in influences list, and, using one of the paint tools (Replace, Add, Scale or Smooth) start editing weights. Paint settings are somewhat identical to what they are in standard  Paint Skin Weights Tool , but you'll notice a few differences:   Brush intensity is saved and restored separately for each paint mode. It makes more sense that for  Scale  you would usually use a large value, something like  .9 , while  Add  better works with small increments, like  .1 .  Smoothing brush operates operates on all influences in a vertex. You should notice a very intuitive response from the brush.   See  Paint Tab  if you need more assistance in understanding this UI.", 
            "title": "Start painting weights"
        }, 
        {
            "location": "/quickstart/index.html#add-more-layers", 
            "text": "Skinning layers is a very powerful tool. Just like in your favorite image editing application, layers will allow you to paint in multiple \"planes\". Paint spine weights in one layer, arms on the other, and ngSkinTools will combine this real-time into single weights \"image\" for skinCluster to use.  As we're just getting the first feel here, just create a few of them (right-click layers list and choose  New Layer ), without worrying if you need them or not.   Now, try experimenting. What happens if you flood all weights to  joint1  on the lower layer, and paint on some vertices  to the  joint2  in the upper layer? Not really impressive yet,  joint2  simply overrides  joint1 .   The real magic happens when you go back to lower layer, and add some weights for  joint3 . Weights will be shared between  joint1  and  joint3 , but then previously painted  joint2  will override areas where it's painted.  Now try doing something more practical. In lowest layer, flood everything to just spine joints. In higher layer, paint just shoulders. Add few more layers for arms, hips, legs, props.. Before you do though, have a quick look at  controlling layer transparency .", 
            "title": "Add more layers"
        }, 
        {
            "location": "/quickstart/index.html#mirror-weights", 
            "text": "Mirroring is a bit different in ngSkinTools. The process is divided into two parts:    Initializing mirror info : this is where plugin memorizes how vertices and influences on one side map to the other side. You only have to do this once, unless you add more influences later;  Mirroring weights : because plugin already knows how to find left and right side, you can repeat this as many times as you want in any pose.        To initialize mirror info, put your rig into neutral position, go to  Mirror  tab and click  Initialize . In the dialog that opens, click  Initialize  to accept default options.\nTo begin using mirror function (via  Mirror  button in  Paint  tab, or from the  Mirror  tab), you have to initialize mirror information first.    Put your rig into neutral position, go to  Mirror  tab and click  Initialize . In the dialog that opens, click  Initialize  to accept default options.   Note  Even though default options might work for basic rigs, there are quite a few features for controlling mirror behavior in  Initialize Mirror  window. See  Mirror Tab  for details.   Mirror is now enabled for the mesh. Choose which direction to mirror (from left to right side or vice versa), select layers to mirror (you can select multiple layers holding Shift or Ctrl buttons), and click  Mirror .  See  Mirror Tab  section for more detailed explanations of mirroring options.", 
            "title": "Mirror weights"
        }, 
        {
            "location": "/videos/index.html", 
            "text": "Videos\n\n\nThis is a placeholder page to host any video material associated with ngSkinTools\n\n\nOverview\n\n\nPromotional video\n\n\nThe original showcase of most of ngSkinTools features:\n\n\n\n\n\nIntroductory series\n\n\n#1 - Quickstart\n\n\nTaking first steps with ngSkinTools:\n\n\n\n\n\n#2 - Under the hood\n\n\nLet's see how it all works  in ngSkinTools behind the scenes.\n\n\n\n\n\n#3 - Layers", 
            "title": "Videos"
        }, 
        {
            "location": "/videos/index.html#videos", 
            "text": "This is a placeholder page to host any video material associated with ngSkinTools", 
            "title": "Videos"
        }, 
        {
            "location": "/videos/index.html#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/videos/index.html#promotional-video", 
            "text": "The original showcase of most of ngSkinTools features:", 
            "title": "Promotional video"
        }, 
        {
            "location": "/videos/index.html#introductory-series", 
            "text": "", 
            "title": "Introductory series"
        }, 
        {
            "location": "/videos/index.html#1-quickstart", 
            "text": "Taking first steps with ngSkinTools:", 
            "title": "#1 - Quickstart"
        }, 
        {
            "location": "/videos/index.html#2-under-the-hood", 
            "text": "Let's see how it all works  in ngSkinTools behind the scenes.", 
            "title": "#2 - Under the hood"
        }, 
        {
            "location": "/videos/index.html#3-layers", 
            "text": "", 
            "title": "#3 - Layers"
        }, 
        {
            "location": "/layers/index.html", 
            "text": "Layers\n\n\nLayer Transparency\n\n\nEach layer has transparency. Just like in image editing, you most probably want upper layers to be \"seen through\", so that lower layers can be uncovered where needed.\n\n\nTo make a vertex \"transparent\" in a layer, you can do three things:\n\n\n\n\nPaint weights on the vertex so that the sum of all weights is below 1.0.\n\n\nUse Layer Masks.\n\n\nAdjust overall layer opacity in layer properties (see \nUI\n for details)\n\n\n\n\nWhile for a quick result, option 1 might seam feasible, a much more reliable way of controlling layer transparency is via mask. \n\n\nYou might have noticed that a first item in \"influences\" list is \n[Layer Mask]\n. It is a multiplier for the whole layer.\n\n\nNormalizing weights\n\n\nDescribed behavior was introduced in version 1.4. Previously some weight upscaling was being happenning as well in some cases.\n \n\n\nWeights in each layer are normalized so that sum of weights per each vertex does not exceed 1.0. This is not configurable and there's no way to enable \"post-normalization\" like there is in the skin cluster.\n\n\nHowever, layers do allow sum of weights to be lower than 1.0. These all are valid weights in a layer:\n\n\n\n\n\n\n\n\nvertex #\n\n\njoint 1\n\n\njoint 2\n\n\njoint 3\n\n\n(comment)\n\n\n\n\n\n\n\n\n\n\n0\n\n\n0.2\n\n\n0.8\n\n\n0\n\n\nsum of weights: 1.0; no transparency.\n\n\n\n\n\n\n1\n\n\n0.2\n\n\n0.3\n\n\n0.5\n\n\nsum: 1.0\n\n\n\n\n\n\n2\n\n\n0.2\n\n\n0.4\n\n\n0\n\n\nsum: 0.6; vertex has 40% transparency\n\n\n\n\n\n\n3\n\n\n0\n\n\n0\n\n\n0\n\n\n100% transparency\n\n\n\n\n\n\n\n\nWhen you're editing weights, these rules of automatic weight normalization are applied:\n\n\n\n\nWeight for current influence is restricted to \n[0..1]\n range, and otherwise is not modified. Painting \"replace joint1 with value 0.6\" results in exact value 0.6 on joint1;\n\n\nIf needed, weights on other influences are reduced proportionally to accommodate the change;\n\n\nWeights on other influences are ONLY reduced, never upscaled; if you paint \"replace 0.0 on joint 1\", this does not mean that weight will be distributed on other joints in the layer;   \n\n\nFor \"smooth\" paint mode, current influence does not exist and all weights are treated equally.\n\n\n\n\nExample weight transitions for changes being made to a single vertex:\n\n\n\n\n\n\n\n\nState\n\n\njoint 1\n\n\njoint 2\n\n\njoint 3\n\n\n\n\n\n\n\n\n\n\nInitial weights\n\n\n1.0\n\n\n0.0\n\n\n0.0\n\n\n\n\n\n\nReplace weights on \njoint 2\n with 1.0\n\n\n0.0\n\n\n1.0\n\n\n0.0\n\n\n\n\n\n\nAdd 0.1 on \njoint 2\n: no effect\n\n\n0.0\n\n\n1.0\n\n\n0.0\n\n\n\n\n\n\nAdd 0.1 on \njoint 1\n: weight on joint 2 reduced\n\n\n0.1\n\n\n0.9\n\n\n0.0\n\n\n\n\n\n\nScale 0.5 on \njoint 2\n: other weights not impacted, vertex becomes transparent\n\n\n0.1\n\n\n0.45\n\n\n0.0", 
            "title": "Layers"
        }, 
        {
            "location": "/layers/index.html#layers", 
            "text": "", 
            "title": "Layers"
        }, 
        {
            "location": "/layers/index.html#layer-transparency", 
            "text": "Each layer has transparency. Just like in image editing, you most probably want upper layers to be \"seen through\", so that lower layers can be uncovered where needed.  To make a vertex \"transparent\" in a layer, you can do three things:   Paint weights on the vertex so that the sum of all weights is below 1.0.  Use Layer Masks.  Adjust overall layer opacity in layer properties (see  UI  for details)   While for a quick result, option 1 might seam feasible, a much more reliable way of controlling layer transparency is via mask.   You might have noticed that a first item in \"influences\" list is  [Layer Mask] . It is a multiplier for the whole layer.", 
            "title": "Layer Transparency"
        }, 
        {
            "location": "/layers/index.html#normalizing-weights", 
            "text": "Described behavior was introduced in version 1.4. Previously some weight upscaling was being happenning as well in some cases.    Weights in each layer are normalized so that sum of weights per each vertex does not exceed 1.0. This is not configurable and there's no way to enable \"post-normalization\" like there is in the skin cluster.  However, layers do allow sum of weights to be lower than 1.0. These all are valid weights in a layer:     vertex #  joint 1  joint 2  joint 3  (comment)      0  0.2  0.8  0  sum of weights: 1.0; no transparency.    1  0.2  0.3  0.5  sum: 1.0    2  0.2  0.4  0  sum: 0.6; vertex has 40% transparency    3  0  0  0  100% transparency     When you're editing weights, these rules of automatic weight normalization are applied:   Weight for current influence is restricted to  [0..1]  range, and otherwise is not modified. Painting \"replace joint1 with value 0.6\" results in exact value 0.6 on joint1;  If needed, weights on other influences are reduced proportionally to accommodate the change;  Weights on other influences are ONLY reduced, never upscaled; if you paint \"replace 0.0 on joint 1\", this does not mean that weight will be distributed on other joints in the layer;     For \"smooth\" paint mode, current influence does not exist and all weights are treated equally.   Example weight transitions for changes being made to a single vertex:     State  joint 1  joint 2  joint 3      Initial weights  1.0  0.0  0.0    Replace weights on  joint 2  with 1.0  0.0  1.0  0.0    Add 0.1 on  joint 2 : no effect  0.0  1.0  0.0    Add 0.1 on  joint 1 : weight on joint 2 reduced  0.1  0.9  0.0    Scale 0.5 on  joint 2 : other weights not impacted, vertex becomes transparent  0.1  0.45  0.0", 
            "title": "Normalizing weights"
        }, 
        {
            "location": "/mirroring/index.html", 
            "text": "Mirroring in previous versions of ngSkinTools (1.4.1 and earlier)\n\n\n\n\nNote\n\n\nPrevious versions of ngSkinTools required slightly complicated workflow for mirroring. This section is not needed for newer versions of the plugin; for UI details, see \nMirror Tab\n.\n\n\n\n\nInitialization\n\n\nTo be able to mirror weights with ngSkinTools, first an initialization of influence and vertex associations is necessary. In this step, plugin figures out how vertices and influences map onto the opposite side of the rig, and caches that information for later use.\n\n\nTo perform initialization:\n\n\n\n\nGo to \"Init Skin Transfer\" dialog;\n\n\n\n\n\n\n\n\nPut the character in default (bind) pose; precision is important because mesh associations (left to right and right to left) will be decided based on current pose; influence associations also will be using current joint positions as well;\n\n\n\n\n\n\nNote\n\n\nNewer versions of the plugin (after 1.5) do not require bind pose anymore. \n\n\n\n\n\n\n\n\nEdit influence association options (explained below);\n\n\nClick \"Initialize\"; plugin will read mesh and influences positions, and create an internal set of rules of how one side of your rig maps onto the other side;\n\n\n\n\n\n\n\n\nReview how influences map onto each other; if you think that some influences are not finding it's pair, or should not be paired with any other influence, add manual association overrides.\n\n\n\n\n\n\n\n\nWhen you're happy with influence association map, you can close initialization window and start using mirror tool.\n\n\n\n\nInitialization has to be repeated each time you add or remove influences to a skin cluster; plugin will warn you when cached data becomes outdated.\n\n\nInitialization Options\n\n\n\n\n\n\n\n\nInfluence distance error\n: when matching influences by position, this defines the overall tolerated inaccuracy. Try keeping this value low, as increasing it might allow influences being associated with wrong pair. In general, influences should be matched with closest available influence on the other side.\n\n\n\n\n\n\nInfluence prefixes\n: when matching influences by name, these are prefixes that will be ignored. For example, if your naming convention for left and right influences is \nL_wrist\n, \nR_wrist\n, set prefixes to \nL_,R_\n;\n\n\n\n\n\n\nMirror Axis\n: normally, \"left-right\" axis is X, while Y is \"top-bottom\", and Z is \"front-back\". Note that you don't have to define mirroring direction  (\"left to right or right to left?\") in this step yet.\n\n\n\n\n\n\nCurrent Status\n: displays current state of mirror cache status.\n\n\n\n\n\n\nInfluence Associations\n: a list of how influences map from one side to another. Entries might look like this:\n\n\n\n\nL_joint1 \n-\n R_joint1\n: bi-directional association: weights of L_joint1 on one side will become weights of R_joint1 on another side, and vice versa;\n\n\nL_joint2 -\n R_joint1\n: weights of L_joint2 on one side will become weights of R_joint1 on another side, but that's not the case the other way around. This mostly happens when one side has more joints than another side, then you end up with a rule list \nL_joint1 \n-\n R_joint1\n, \nL_joint2 -\n R_joint1\n;\n\n\nhipJoint: itself\n: joint does not map to another joint, and when mirroring, weights on this joint become symmetrical on both sides. That's usually joints that don't have their mirror counterpart and are on the mirror plane themselves, e.g. spine or neck.\n\n\n\n\n\n\n\n\n\"Influence Associations\" popup menu\n\n\n\n\n\n\nAdd manual association\n: define influence association manually; in the dialog that opens, select source influence, destination influence, specify if you want bidirectional, one-sided or self-reference association, and click add. Manual associations are displayed with an \"\n[M]\n\" prefix.\n\n\n\n\n\n\nRemove manual association\n: removes selected manual association; influences again become subject to automatic association rules. \n\n\n\n\n\n\n.. note:: for convenience, manual influence association rules are saved in scene file and will be remembered next time rig is opened.\n\n\nMirroring\n\n\n\n\nWhen mirroring info is initialized, weights are ready to be mirrored. This can be done in any pose of the rig, thanks to pre-cached mirroring associations. To mirror weights:\n\n\n\n\nIn layer list, select the layer to be mirrored (most often that will just be the current layer you're painting weights on at that moment);\n\n\nDecide which direction are you mirroring to, and select the appropriate option;\n\n\nClick mirror!\n\n\n\n\nMirror Options\n\n\n\n\n\n\n\n\nMirror Direction\n: specifies if weights should be copied from left side to the right, or the other way around (same goes for top to bottom or front to back, should you choose another mirroring axis); \n\n\n\n\n\n\nGuess from stroke\n - mirroring direction will be guessed automatically. If last paint stroke edited weights on the left side, weights will be copied to the right, and vice versa. Strokes or actions that edit both sides will be ignored; if you edit left side, and then flood weights, it will still resolve to \"left-\nright\" direction.\n\n\n\n\nNote\n\n\nFor this feature to work, mirroring info should be initialized before the stroke, otherwise the tool is not aware which side is which!\n\n\n\n\n\n\n\n\nPositive to negative side\n or \nNegative to positive side\n: define mirroring direction manually. \n\n\n\n\n\n\n\n\n\n\nMirror Seam Width\n: defines seam width (in scene distance units) between two sides; this allows for some automatic smoothing on vertices that are near mirror axis.\n\n\n \n\n\nOn the left: mirror result with seam width = 0.0001; on the right - 2.0; increasing seam width helped smooth weights between left and right sides automatically.\n\n\n\n\nNote\n\n\nThis smoothing is not the same as applying some smooth on mirror axis after mirroring. Internally what happens is that on the seam axis, a flipped version of weights is blended together with original. Take a look at the picture below:\n\n\n\n\nOn the left, asymmetric weighting between two influences. On the right, result of mirroring with a large seam width. You can see that it's not a straightforward blur, but rather a blend of original and flipped version of weights.\n\n\nIt's not necessary to understand how this feature works internally, though. It's enough to know that you should set your seam width to roughly where you feel is the \"width of symmetry axis\" for your particular model is (for the model above, that would be roughly the width of belt buckle), and you'll find this feature to be pretty intuitive to use.\n\n\n\n\n\n\n\n\nElements\n: though you'll normally want to mirror both mask and influence weights at the same time, there might be occasions where you'd paint asymmetric mask and would want to mirror just influence weights, or vice versa.", 
            "title": "Mirroring"
        }, 
        {
            "location": "/mirroring/index.html#mirroring-in-previous-versions-of-ngskintools-141-and-earlier", 
            "text": "Note  Previous versions of ngSkinTools required slightly complicated workflow for mirroring. This section is not needed for newer versions of the plugin; for UI details, see  Mirror Tab .", 
            "title": "Mirroring in previous versions of ngSkinTools (1.4.1 and earlier)"
        }, 
        {
            "location": "/mirroring/index.html#initialization", 
            "text": "To be able to mirror weights with ngSkinTools, first an initialization of influence and vertex associations is necessary. In this step, plugin figures out how vertices and influences map onto the opposite side of the rig, and caches that information for later use.  To perform initialization:   Go to \"Init Skin Transfer\" dialog;     Put the character in default (bind) pose; precision is important because mesh associations (left to right and right to left) will be decided based on current pose; influence associations also will be using current joint positions as well;    Note  Newer versions of the plugin (after 1.5) do not require bind pose anymore.      Edit influence association options (explained below);  Click \"Initialize\"; plugin will read mesh and influences positions, and create an internal set of rules of how one side of your rig maps onto the other side;     Review how influences map onto each other; if you think that some influences are not finding it's pair, or should not be paired with any other influence, add manual association overrides.     When you're happy with influence association map, you can close initialization window and start using mirror tool.   Initialization has to be repeated each time you add or remove influences to a skin cluster; plugin will warn you when cached data becomes outdated.", 
            "title": "Initialization"
        }, 
        {
            "location": "/mirroring/index.html#initialization-options", 
            "text": "Influence distance error : when matching influences by position, this defines the overall tolerated inaccuracy. Try keeping this value low, as increasing it might allow influences being associated with wrong pair. In general, influences should be matched with closest available influence on the other side.    Influence prefixes : when matching influences by name, these are prefixes that will be ignored. For example, if your naming convention for left and right influences is  L_wrist ,  R_wrist , set prefixes to  L_,R_ ;    Mirror Axis : normally, \"left-right\" axis is X, while Y is \"top-bottom\", and Z is \"front-back\". Note that you don't have to define mirroring direction  (\"left to right or right to left?\") in this step yet.    Current Status : displays current state of mirror cache status.    Influence Associations : a list of how influences map from one side to another. Entries might look like this:   L_joint1  -  R_joint1 : bi-directional association: weights of L_joint1 on one side will become weights of R_joint1 on another side, and vice versa;  L_joint2 -  R_joint1 : weights of L_joint2 on one side will become weights of R_joint1 on another side, but that's not the case the other way around. This mostly happens when one side has more joints than another side, then you end up with a rule list  L_joint1  -  R_joint1 ,  L_joint2 -  R_joint1 ;  hipJoint: itself : joint does not map to another joint, and when mirroring, weights on this joint become symmetrical on both sides. That's usually joints that don't have their mirror counterpart and are on the mirror plane themselves, e.g. spine or neck.", 
            "title": "Initialization Options"
        }, 
        {
            "location": "/mirroring/index.html#influence-associations-popup-menu", 
            "text": "Add manual association : define influence association manually; in the dialog that opens, select source influence, destination influence, specify if you want bidirectional, one-sided or self-reference association, and click add. Manual associations are displayed with an \" [M] \" prefix.    Remove manual association : removes selected manual association; influences again become subject to automatic association rules.     .. note:: for convenience, manual influence association rules are saved in scene file and will be remembered next time rig is opened.", 
            "title": "\"Influence Associations\" popup menu"
        }, 
        {
            "location": "/mirroring/index.html#mirroring", 
            "text": "When mirroring info is initialized, weights are ready to be mirrored. This can be done in any pose of the rig, thanks to pre-cached mirroring associations. To mirror weights:   In layer list, select the layer to be mirrored (most often that will just be the current layer you're painting weights on at that moment);  Decide which direction are you mirroring to, and select the appropriate option;  Click mirror!", 
            "title": "Mirroring"
        }, 
        {
            "location": "/mirroring/index.html#mirror-options", 
            "text": "Mirror Direction : specifies if weights should be copied from left side to the right, or the other way around (same goes for top to bottom or front to back, should you choose another mirroring axis);     Guess from stroke  - mirroring direction will be guessed automatically. If last paint stroke edited weights on the left side, weights will be copied to the right, and vice versa. Strokes or actions that edit both sides will be ignored; if you edit left side, and then flood weights, it will still resolve to \"left- right\" direction.   Note  For this feature to work, mirroring info should be initialized before the stroke, otherwise the tool is not aware which side is which!     Positive to negative side  or  Negative to positive side : define mirroring direction manually.       Mirror Seam Width : defines seam width (in scene distance units) between two sides; this allows for some automatic smoothing on vertices that are near mirror axis.     On the left: mirror result with seam width = 0.0001; on the right - 2.0; increasing seam width helped smooth weights between left and right sides automatically.   Note  This smoothing is not the same as applying some smooth on mirror axis after mirroring. Internally what happens is that on the seam axis, a flipped version of weights is blended together with original. Take a look at the picture below:   On the left, asymmetric weighting between two influences. On the right, result of mirroring with a large seam width. You can see that it's not a straightforward blur, but rather a blend of original and flipped version of weights.  It's not necessary to understand how this feature works internally, though. It's enough to know that you should set your seam width to roughly where you feel is the \"width of symmetry axis\" for your particular model is (for the model above, that would be roughly the width of belt buckle), and you'll find this feature to be pretty intuitive to use.     Elements : though you'll normally want to mirror both mask and influence weights at the same time, there might be occasions where you'd paint asymmetric mask and would want to mirror just influence weights, or vice versa.", 
            "title": "Mirror Options"
        }, 
        {
            "location": "/ui/index.html", 
            "text": "User Interface\n\n\nOverview\n\n\nThis is how the main window of ngSkinTools is laid out:\n\n\n\n\n\n\nLayers list\n: this is where you select active layer, and can also add/remove/arrange them;\n\n\nInfluences list\n: select target influence to paint weights for, or a group of influences for some other operation;\n\n\nInfluences filter\n: options for filtering influences list;\n\n\nTools tabs\n: various tools for skin weights editing.\n\n\n\n\nLayers list\n\n\nThe selected layer in this list is the \nactive layer\n. When you paint, mirror, or perform any other weight setting operation, it targets currently selected layer. Some operations (like mirror) support multiple selected layers; use shift-select or ctrl-select to select multiple items in the list.\n\n\nLayers can be added, edited and removed here using the context menu.\n\n\n\n\n\n\n\n\nNew Layer...\n - opens up a dialog for a new layer to be created. Enter the name \n\n\n\n\n\n\n\n\nDuplicate Selected Layer(s)\n - makes a copy of selected layer; command supports multiple selected layers;\n\n\n\n\nDelete Selected Layer(s)\n - selected layer is removed from layers list; command supports multiple selected layers;\n\n\nMerge Layer Down\n - selected layer gets merged with the layer underneath it.\n\n\nMove Current Layer Up\n, \nMove Current Layer Down\n: change the order of layer list. Layer order is important because upper layers override contents of lower layers;\n\n\nToggle Layer On/Off\n - enable/disable layer. Weights that were painted in disabled layers do not get added to the skin cluster.\n\n\n\n\nProperties...\n - adjust properties of the selected layer.\n\n\n\n\nLayer opacity is one of the ways to control \ntransparency\n in a layer; value \n1.0\n means that layer is 100% enabled, while \n0.0\n effectively turns layer off (0%)\n\n\n\n\n\n\nInfluences list\n\n\nThis list shows skin influences (joints) of currently selected mesh. Selected item in the list is an \nactive influence\n, being a target for operations like paint, copy/paste, etc. Some operations support multiple selected influences, in that case, use ctrl-select (or shift-select) to select multiple items.\n\n\nThe list also contains a special item to select \nlayer mask\n, and, if skinCluster \"Skinning Method\" is set to \"Weight Blended\", there's also an item to edit dual quaternion blend weights:\n\n\n\n\nTo make finding influences easier, use \nInfluence Filter\n to list only those you currently need.\n\n\nUse context menu for more operations: \n\n\n\n\n\n\nCopy Influence Weights\n: for currently selected influence, copies values across all vertices into memory to be later used for \nPaste Weights\n operation.\n\n\nCut Influence Weights\n: same as \"Copy\", but sets influences to 0.0 after;\n\n\nPaste Weights (Add)\n: using weights previously stored in memory via \nCut/Copy Influence Weights\n operation, merge them into the current influence;\n\n\nPaste Weights (Replace)\n: active influence values are replaced with weights previously stored in memory via \nCut/Copy Influence Weights\n, discarding previous weights on the influence;\n\n\nList All Influences\n: when this option is selected, Influences List shows all influences (unless further filtered by \nInfluences Filter\n);\n\n\nList Only Active Influences\n: when this option is selected, only those influences will be shown that have weights painted on currently active layer. This is a convenient option when you've got your layers painted and now jumping between them tweaking weights here and there - as you switch from layer to layer, you only see influences relevant to this selected layer. Obviously, if you want to add an influence to the layer, you'll have to switch back to \nList All Influences\n;\n\n\nConvert Mask to Transparency\n: multiplies layer weights with mask value, and discards the mask; as a result, layer will behave the same (final transparency untouched), but it will no longer be provided by mask;\n\n\nConvert Transparency to Mask\n: converts all layer transparency to mask value, and upscales weights on all vertices to a sum of 1.0; this mode is useful when you started painting your layer without mask, but now want to convert to mask workflow; \n\n\nShow/Hide Influence Filter\n: toggles visibility of \nInfluences Filter\n.\n\n\n\n\nInfluences filter\n\n\n\n\nTo narrow down the number of influences shown, enter a hint in \nInfluence Filter:\n search box. You don't need to specify influence name precisely - try entering a fragment of what you're searching for, then refine the query when you get the results. Only influences matching the filter will be shown.\n\n\nSome filter examples:\n\n\n\n\nL_\n will match influences \"L_shoulder_joint, L_arm, jnt_l_finger1\" - basically anything that contains string \nL_\n in it's name. It's also case-insensitive;\n\n\nL_ R_\n will match \"L_arm, R_arm\" influences; when search terms are separated by space, this basically means \n\"show anything that matches \nL_\n, as well as anything that matches \nR_\n\"\n;\n\n\nL_*arm\n will match \"L_upper_arm\", \"L_lower_arm_twist\"; use placeholder \n*\n when you want to specify that influence name needs to match two fragments, with \"anything in between\" as \n*\n;\n\n\nCombine queries as you see fit, like \nL_*arm*twist R_*arm*twist shoulder\n to limit the list to just arm and shoulders (query will probably differ based on your naming scheme).\n\n\n\n\nShow all influences / Only influences with non-zero weights\n correspond to \nall / active influences\n in Influences list context menu, so it's just an alternate UI for the same feature.\n\n\nPaint tab\n\n\nPaint tab provides configuration to paint weights tool. It does not start internal Maya's default \nPaint Skin Weights Tool\n, as ngSkinTools has it's own implementation.\n\n\nThe UI will be disabled while the tool is not active; start the paint tool by clicking \nPaint\n button at the lower right corner (\nPaint\n button is replaced by \nFlood\n while paint tool is active);\n\n\n\n\nPaint tool will always target last selected layer and influence, so select those in Layers/Influences list first.\n\n\nTool settings should be familiar for Maya users already:\n\n\n\n\nBrush shape\n: changes the shape of the brush as well as it's opacity on the edges. \n\n\nMode\n: changes brush behavior; see \nPaint Modes\n;\n\n\nIntensity\n: Overall intensity of the brush. For the convenience, this setting is saved per brush mode, and restored as you switch between them.\n\n\nBrush Radius\n: while you can use this field to set brush radius, it's much more convenient to do it interactively: as everywhere else in Maya, hold \"B\" button and left-drag with the mouse to grow/shrink it.\n\n\n\n\nTab buttons:\n\n\n\n\n\n\nPaint\n: Start the paint tool. Switches the mesh to weights preview mode, and you can start painting the values:\n\n\n\n\nYou don't need to exit the tool to switch active layer or influence. Just select them in the Layers/Influences list and continue painting. \n\n\n\n\n\n\nFlood\n: apply current paint operation to the whole selection. It's almost equivalent as if you'd spend the time to paint with current brush across the whole mesh/vertex selection.\n\n\n\n\nNote\n\n\nThis feature is mostly useful when applying some smoothiness across the whole layer. Select \nSmooth\n mode, set \nintensity\n to a lower value, and hit \nFlood\n few times until you're satisfied with results. \n\n\n\n\n\n\n\n\nMirror\n: a shortcut to mirror operation, available in \nMirror tab\n. Edit mirroring settings there.        \n\n\n\n\n\n\nPaint modes:\n\n\n\n\n\n\nReplace\n: sets weight for an influence to specified value; when reducing weight, remainder is distributed to other influences in the layer; if there are no other influences in the layer, layer transparency is created instead.\n\n\n\n\nNote\n\n\nuse CTRL key to invert intensity value. Intensity 1.0 becomes 0.0, 0.9 becomes 0.1, etc. \n\n\n\n\n\n\nNote\n\n\nuse SHIFT key to switch to Smooth mode while painting.\n\n\n\n\n\n\n\n\nAdd\n: appends value to the current weight of an influence. Use this mode with low intensity values (e.g. 0.1) to slightly increase influence weights over the paint area.\n\n\n\n\n\n\nScale\n: multiplies current weight of an influence with intensity value. Use this mode to reduce influence weights over paint area when using high intensity values, like 0.9 or other values close to 1.0.\n\n\n\n\n\n\nSmooth\n: smooth weights in a paint area. This tool affects all influences, unless layer mask is selected. Weights are averaged slightly and deformation appears smoother.\n\n\n\n\n\n\nDisplay settings:\n\n\nThis section controls the appearance of the mesh while in paint mode.\n\n\n\n\nInfluence display\n\n\nAll influences, multiple colors\n: shows weights of all influences at once. If skeleton is colorized (when binding smooth skin, standard Maya option), then joint weights are used for the color; otherwise, a random color is chosen.\n\n\nCurrent influence, grayscale gradient\n: just the currently active influence, where white color equals 1.0 and black equals zero.\n\n\n\n\n\n\n\n\nMirror tab\n\n\nMirroring skin weights is an important part of skinning workflow. NgSkinTools has it's own mirroring implementation, with a few differences to Maya's \"Mirror Skin Weights\" tool.\n\n\n\n\nThe \"Mirror Weights\" button will operate on selected layer (or multiple layers, if you selected more in layers list).\n\n\nMirror Options\n\n\n\n\n\n\nMirror direction\n: Choose the direction of the mirror: copy right-side contents on to the left side, or vice versa?\n\n\n\n\n\n\nGuess from stroke\n:\n   mirroring direction will be guessed automatically. If last paint stroke edited weights on the left side, weights will be copied to the right, and vice versa. Strokes or actions that edit both sides will be ignored; if you edit left side, and then flood weights, it will still resolve to \"left-\nright\" direction.\n\n\n\n\n\n\nLeft to right (+X to -X)\n: will mirror weights of vertices that are on the positive side of X axis on to the verts on the negative side;\n\n\n\n\nRight to left (-X to +X)\n  will mirror weights of vertices that are on the negative side of X axis on to the verts on the positive side;\n\n\n\n\n\n\nNote\n\n\nDepending on mirror axis you selected, options might be named slightly differently (\n\"top to bottom\"\n, \n\"front to back\"\n); when in doubt, refer to axis direction: \n\"+Y to -Y\"\n, etc;\n\n\n\n\n\n\n\n\nMirror seam width\n: defines seam width (in scene distance units) between two sides; this allows for some automatic smoothing on vertices that are near mirror axis. Start with a small value, which basically results in sharp mirroring edge (as it is in standard Maya tools), and experiment with increasing it, which will make mirror operation have a falloff on the mirror seam.\n\n\n\n\nOn the left: mirror result with seam width = 0.0001; on the right - 2.0; increasing seam width helped smooth weights between left and right sides automatically.\n\n\n\n\nNote\n\n\nThis smoothing is not the same as applying some smooth on mirror axis after mirroring. Internally what happens is that on the seam axis, a flipped version of weights is blended together with original. Take a look at the picture below:\n\n\n\n\nOn the left, asymmetric weighting between two influences. On the right, result of mirroring with a large seam width. You can see that it's not a straightforward blur, but rather a blend of original and flipped version of weights.\n\n\nIt's not necessary to understand how this feature works internally, though. It's enough to know that you should set your seam width to roughly where you feel is the \"width of symmetry axis\" for your particular model is (for the model above, that would be roughly the width of belt buckle), and you'll find this feature to be pretty intuitive to use.\n\n\n\n\n\n\n\n\nElements\n: though you'll normally want to mirror both mask and influence weights at the same time, there might be occasions where you'd paint asymmetric mask and would want to mirror just influence weights, or vice versa.\n\n\n\n\nMirror weights\n: check to mirror influences for selected layer(s);\n\n\nMirror mask\n: check to mirror mask for selected layer(s);\n\n\nMirror dual quaternion weights\n: check to mirror DQ weights for selected layer(s);\n\n\n\n\n\n\n\n\nVertex Mapping\n\n\nThis section controls how mesh vertices are prepared for mirroring.\n\n\n\n\nMirror Axis\n: normally, \"left-right\" axis is X, while Y is \"top-bottom\", and Z is \"front-back\".\n\n\nMapping mode\n: controls how vertices from one side are being looked up on the other side.\n\n\nClosest point on surface\n: in this algorithm, vertices are weighted based on the closest polygon on the\n   opposite side. This is the most straightforward and intuitive to use option.\n\n\n\n\nUV Space\n: in this algorithm, UV layout is used instead of vertex XYZ coordinates to lookup opposite side\n   polygon. In case UV is not hit for some specific vertex(e.g., not perfectly symmetric UV),\n   \"Closest point on surface\" algorithm is used instead for that vertex.\n\n\nThe \"opposite side\" in UV case means that UV layout is \"flipped\" around X=0.5 vertical line.\n\n\n\n\n\n\n\n\n\n\nInfluences Mapping\n\n\nThis section controls how left and right side influences are mapped between each other. Depending on your skeleton, they can be linked in few possible ways:\n\n\n\n\n\"Middle\" joints: they are mapped to themselves. Whatever weight they have on one side, will be assigned to them on the other side of the mesh;\n\n\n\"Left\" and \"right\" pairs: like \"left finger\" and \"right finger\"\n\n\nAsymmetric joints: they don't have a corresponding joint on the other side. When mirroring, their weight on the other side will be assigned to a closest joint.\n\n\n\n\nTo create these associations, there are multiple tools in ngSkinTools:\n\n\n\n\nMatching by distance: just like with vertices, joints are looked up on the other side based on their position values. If you have a perfectly symmetrical joints, that's what will get you most of the pairing;\n\n\nMatching by name: if your joints have a good naming convention, especially consistent left-right naming, that also can help matching joints in pairs. If you name your joints \"L_thumb\" and \"R_thumb\", you can tell ngSkinTools that joints are prefixed \"L_\" and \"R_\",  and ngSkinTools will detect this as a pair. \n\n\n\n\nControls:\n\n\n\n\nPosition tolerance\n:  \n\n\nIgnore: Prefixes/Suffixes\n: when matching by name, choose \"Prefixes\" if your influence names are prefixed, like \"L_thumb\" and \"R_thumb\"; choose suffixes if it's instead \"thumb_lf\" and \"thumb_rt\"\n\n\nInfluence prefixes/Influence suffices\n: put your influence prefixes or suffixes here. For the above example, for prefixes you'd write \nL_, R_\n and for suffixes \n_lf, _rt\n\n\n\n\nEdit influences associations\n: view and manually edit influence associations.\n\n\n\n\nNote\n\n\nI'm not quite happy with the current state of manual influence associations feature and would like to redo the whole thing at some point. Please excuse me insufficient level of documentation here for now.\n\n\n\n\n\n\n\n\nRelax tab", 
            "title": "User Interface"
        }, 
        {
            "location": "/ui/index.html#user-interface", 
            "text": "", 
            "title": "User Interface"
        }, 
        {
            "location": "/ui/index.html#overview", 
            "text": "This is how the main window of ngSkinTools is laid out:    Layers list : this is where you select active layer, and can also add/remove/arrange them;  Influences list : select target influence to paint weights for, or a group of influences for some other operation;  Influences filter : options for filtering influences list;  Tools tabs : various tools for skin weights editing.", 
            "title": "Overview"
        }, 
        {
            "location": "/ui/index.html#layers-list", 
            "text": "The selected layer in this list is the  active layer . When you paint, mirror, or perform any other weight setting operation, it targets currently selected layer. Some operations (like mirror) support multiple selected layers; use shift-select or ctrl-select to select multiple items in the list.  Layers can be added, edited and removed here using the context menu.     New Layer...  - opens up a dialog for a new layer to be created. Enter the name      Duplicate Selected Layer(s)  - makes a copy of selected layer; command supports multiple selected layers;   Delete Selected Layer(s)  - selected layer is removed from layers list; command supports multiple selected layers;  Merge Layer Down  - selected layer gets merged with the layer underneath it.  Move Current Layer Up ,  Move Current Layer Down : change the order of layer list. Layer order is important because upper layers override contents of lower layers;  Toggle Layer On/Off  - enable/disable layer. Weights that were painted in disabled layers do not get added to the skin cluster.   Properties...  - adjust properties of the selected layer.   Layer opacity is one of the ways to control  transparency  in a layer; value  1.0  means that layer is 100% enabled, while  0.0  effectively turns layer off (0%)", 
            "title": "Layers list"
        }, 
        {
            "location": "/ui/index.html#influences-list", 
            "text": "This list shows skin influences (joints) of currently selected mesh. Selected item in the list is an  active influence , being a target for operations like paint, copy/paste, etc. Some operations support multiple selected influences, in that case, use ctrl-select (or shift-select) to select multiple items.  The list also contains a special item to select  layer mask , and, if skinCluster \"Skinning Method\" is set to \"Weight Blended\", there's also an item to edit dual quaternion blend weights:   To make finding influences easier, use  Influence Filter  to list only those you currently need.  Use context menu for more operations:     Copy Influence Weights : for currently selected influence, copies values across all vertices into memory to be later used for  Paste Weights  operation.  Cut Influence Weights : same as \"Copy\", but sets influences to 0.0 after;  Paste Weights (Add) : using weights previously stored in memory via  Cut/Copy Influence Weights  operation, merge them into the current influence;  Paste Weights (Replace) : active influence values are replaced with weights previously stored in memory via  Cut/Copy Influence Weights , discarding previous weights on the influence;  List All Influences : when this option is selected, Influences List shows all influences (unless further filtered by  Influences Filter );  List Only Active Influences : when this option is selected, only those influences will be shown that have weights painted on currently active layer. This is a convenient option when you've got your layers painted and now jumping between them tweaking weights here and there - as you switch from layer to layer, you only see influences relevant to this selected layer. Obviously, if you want to add an influence to the layer, you'll have to switch back to  List All Influences ;  Convert Mask to Transparency : multiplies layer weights with mask value, and discards the mask; as a result, layer will behave the same (final transparency untouched), but it will no longer be provided by mask;  Convert Transparency to Mask : converts all layer transparency to mask value, and upscales weights on all vertices to a sum of 1.0; this mode is useful when you started painting your layer without mask, but now want to convert to mask workflow;   Show/Hide Influence Filter : toggles visibility of  Influences Filter .", 
            "title": "Influences list"
        }, 
        {
            "location": "/ui/index.html#influences-filter", 
            "text": "To narrow down the number of influences shown, enter a hint in  Influence Filter:  search box. You don't need to specify influence name precisely - try entering a fragment of what you're searching for, then refine the query when you get the results. Only influences matching the filter will be shown.  Some filter examples:   L_  will match influences \"L_shoulder_joint, L_arm, jnt_l_finger1\" - basically anything that contains string  L_  in it's name. It's also case-insensitive;  L_ R_  will match \"L_arm, R_arm\" influences; when search terms are separated by space, this basically means  \"show anything that matches  L_ , as well as anything that matches  R_ \" ;  L_*arm  will match \"L_upper_arm\", \"L_lower_arm_twist\"; use placeholder  *  when you want to specify that influence name needs to match two fragments, with \"anything in between\" as  * ;  Combine queries as you see fit, like  L_*arm*twist R_*arm*twist shoulder  to limit the list to just arm and shoulders (query will probably differ based on your naming scheme).   Show all influences / Only influences with non-zero weights  correspond to  all / active influences  in Influences list context menu, so it's just an alternate UI for the same feature.", 
            "title": "Influences filter"
        }, 
        {
            "location": "/ui/index.html#paint-tab", 
            "text": "Paint tab provides configuration to paint weights tool. It does not start internal Maya's default  Paint Skin Weights Tool , as ngSkinTools has it's own implementation.  The UI will be disabled while the tool is not active; start the paint tool by clicking  Paint  button at the lower right corner ( Paint  button is replaced by  Flood  while paint tool is active);   Paint tool will always target last selected layer and influence, so select those in Layers/Influences list first.  Tool settings should be familiar for Maya users already:   Brush shape : changes the shape of the brush as well as it's opacity on the edges.   Mode : changes brush behavior; see  Paint Modes ;  Intensity : Overall intensity of the brush. For the convenience, this setting is saved per brush mode, and restored as you switch between them.  Brush Radius : while you can use this field to set brush radius, it's much more convenient to do it interactively: as everywhere else in Maya, hold \"B\" button and left-drag with the mouse to grow/shrink it.   Tab buttons:    Paint : Start the paint tool. Switches the mesh to weights preview mode, and you can start painting the values:   You don't need to exit the tool to switch active layer or influence. Just select them in the Layers/Influences list and continue painting.     Flood : apply current paint operation to the whole selection. It's almost equivalent as if you'd spend the time to paint with current brush across the whole mesh/vertex selection.   Note  This feature is mostly useful when applying some smoothiness across the whole layer. Select  Smooth  mode, set  intensity  to a lower value, and hit  Flood  few times until you're satisfied with results.      Mirror : a shortcut to mirror operation, available in  Mirror tab . Edit mirroring settings there.", 
            "title": "Paint tab"
        }, 
        {
            "location": "/ui/index.html#paint-modes", 
            "text": "Replace : sets weight for an influence to specified value; when reducing weight, remainder is distributed to other influences in the layer; if there are no other influences in the layer, layer transparency is created instead.   Note  use CTRL key to invert intensity value. Intensity 1.0 becomes 0.0, 0.9 becomes 0.1, etc.     Note  use SHIFT key to switch to Smooth mode while painting.     Add : appends value to the current weight of an influence. Use this mode with low intensity values (e.g. 0.1) to slightly increase influence weights over the paint area.    Scale : multiplies current weight of an influence with intensity value. Use this mode to reduce influence weights over paint area when using high intensity values, like 0.9 or other values close to 1.0.    Smooth : smooth weights in a paint area. This tool affects all influences, unless layer mask is selected. Weights are averaged slightly and deformation appears smoother.", 
            "title": "Paint modes:"
        }, 
        {
            "location": "/ui/index.html#display-settings", 
            "text": "This section controls the appearance of the mesh while in paint mode.   Influence display  All influences, multiple colors : shows weights of all influences at once. If skeleton is colorized (when binding smooth skin, standard Maya option), then joint weights are used for the color; otherwise, a random color is chosen.  Current influence, grayscale gradient : just the currently active influence, where white color equals 1.0 and black equals zero.", 
            "title": "Display settings:"
        }, 
        {
            "location": "/ui/index.html#mirror-tab", 
            "text": "Mirroring skin weights is an important part of skinning workflow. NgSkinTools has it's own mirroring implementation, with a few differences to Maya's \"Mirror Skin Weights\" tool.   The \"Mirror Weights\" button will operate on selected layer (or multiple layers, if you selected more in layers list).", 
            "title": "Mirror tab"
        }, 
        {
            "location": "/ui/index.html#mirror-options", 
            "text": "Mirror direction : Choose the direction of the mirror: copy right-side contents on to the left side, or vice versa?    Guess from stroke :\n   mirroring direction will be guessed automatically. If last paint stroke edited weights on the left side, weights will be copied to the right, and vice versa. Strokes or actions that edit both sides will be ignored; if you edit left side, and then flood weights, it will still resolve to \"left- right\" direction.    Left to right (+X to -X) : will mirror weights of vertices that are on the positive side of X axis on to the verts on the negative side;   Right to left (-X to +X)   will mirror weights of vertices that are on the negative side of X axis on to the verts on the positive side;    Note  Depending on mirror axis you selected, options might be named slightly differently ( \"top to bottom\" ,  \"front to back\" ); when in doubt, refer to axis direction:  \"+Y to -Y\" , etc;     Mirror seam width : defines seam width (in scene distance units) between two sides; this allows for some automatic smoothing on vertices that are near mirror axis. Start with a small value, which basically results in sharp mirroring edge (as it is in standard Maya tools), and experiment with increasing it, which will make mirror operation have a falloff on the mirror seam.   On the left: mirror result with seam width = 0.0001; on the right - 2.0; increasing seam width helped smooth weights between left and right sides automatically.   Note  This smoothing is not the same as applying some smooth on mirror axis after mirroring. Internally what happens is that on the seam axis, a flipped version of weights is blended together with original. Take a look at the picture below:   On the left, asymmetric weighting between two influences. On the right, result of mirroring with a large seam width. You can see that it's not a straightforward blur, but rather a blend of original and flipped version of weights.  It's not necessary to understand how this feature works internally, though. It's enough to know that you should set your seam width to roughly where you feel is the \"width of symmetry axis\" for your particular model is (for the model above, that would be roughly the width of belt buckle), and you'll find this feature to be pretty intuitive to use.     Elements : though you'll normally want to mirror both mask and influence weights at the same time, there might be occasions where you'd paint asymmetric mask and would want to mirror just influence weights, or vice versa.   Mirror weights : check to mirror influences for selected layer(s);  Mirror mask : check to mirror mask for selected layer(s);  Mirror dual quaternion weights : check to mirror DQ weights for selected layer(s);", 
            "title": "Mirror Options"
        }, 
        {
            "location": "/ui/index.html#vertex-mapping", 
            "text": "This section controls how mesh vertices are prepared for mirroring.   Mirror Axis : normally, \"left-right\" axis is X, while Y is \"top-bottom\", and Z is \"front-back\".  Mapping mode : controls how vertices from one side are being looked up on the other side.  Closest point on surface : in this algorithm, vertices are weighted based on the closest polygon on the\n   opposite side. This is the most straightforward and intuitive to use option.   UV Space : in this algorithm, UV layout is used instead of vertex XYZ coordinates to lookup opposite side\n   polygon. In case UV is not hit for some specific vertex(e.g., not perfectly symmetric UV),\n   \"Closest point on surface\" algorithm is used instead for that vertex.  The \"opposite side\" in UV case means that UV layout is \"flipped\" around X=0.5 vertical line.", 
            "title": "Vertex Mapping"
        }, 
        {
            "location": "/ui/index.html#influences-mapping", 
            "text": "This section controls how left and right side influences are mapped between each other. Depending on your skeleton, they can be linked in few possible ways:   \"Middle\" joints: they are mapped to themselves. Whatever weight they have on one side, will be assigned to them on the other side of the mesh;  \"Left\" and \"right\" pairs: like \"left finger\" and \"right finger\"  Asymmetric joints: they don't have a corresponding joint on the other side. When mirroring, their weight on the other side will be assigned to a closest joint.   To create these associations, there are multiple tools in ngSkinTools:   Matching by distance: just like with vertices, joints are looked up on the other side based on their position values. If you have a perfectly symmetrical joints, that's what will get you most of the pairing;  Matching by name: if your joints have a good naming convention, especially consistent left-right naming, that also can help matching joints in pairs. If you name your joints \"L_thumb\" and \"R_thumb\", you can tell ngSkinTools that joints are prefixed \"L_\" and \"R_\",  and ngSkinTools will detect this as a pair.    Controls:   Position tolerance :    Ignore: Prefixes/Suffixes : when matching by name, choose \"Prefixes\" if your influence names are prefixed, like \"L_thumb\" and \"R_thumb\"; choose suffixes if it's instead \"thumb_lf\" and \"thumb_rt\"  Influence prefixes/Influence suffices : put your influence prefixes or suffixes here. For the above example, for prefixes you'd write  L_, R_  and for suffixes  _lf, _rt   Edit influences associations : view and manually edit influence associations.   Note  I'm not quite happy with the current state of manual influence associations feature and would like to redo the whole thing at some point. Please excuse me insufficient level of documentation here for now.", 
            "title": "Influences Mapping"
        }, 
        {
            "location": "/ui/index.html#relax-tab", 
            "text": "", 
            "title": "Relax tab"
        }, 
        {
            "location": "/faq/index.html", 
            "text": "FAQ\n\n\n\n\n\n\nFAQ\n\n\nInstallation\n\n\nIs there a list of what's changed in a new release?\n\n\n\n\n\n\nCommon issues\n\n\nAfter installing new plugin version, Maya complains that \"Invalid plugin version detected\"\n\n\nMaya 2015 crashes when saving a .ma file\n\n\nI click ngSkinTools shelf button, but nothing happens\n\n\nI installed ngSkinTools, but there is no new shelf\n\n\nI have some other weird problem with the ngSkinTools shelf\n\n\nMy mesh looks black after using paint weights\n\n\nWeights are not displayed when using paint tool\n\n\nMy mirror is acting weird\n\n\n\n\n\n\nFeatures\n\n\nA better tutorial is needed\n\n\nPlease add more tutorials\n\n\nI still don't get layers. can you please explain them in other words?\n\n\nAre NURBS Curves/Surfaces supported?\n\n\nHow can I lock an influence?\n\n\n\n\n\n\nPipeline\n\n\nIs ngSkinTools compatible with game engines?\n\n\nI'm ready to give the rig to the animators. Do they need ngSkinTools to be able to use the scene?\n\n\nI need to do the same, but in my script.\n\n\n\n\n\n\nOther\n\n\nI heard ngSkinTools is open source project. Where's the source?\n\n\nWhat are the upcomming features? When?\n\n\nI emailed requesting a feature, is it in the plan?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstallation\n\n\nIs there a list of what's changed in a new release?\n\n\nI always try to outline new things when announcing release in \nnews\n. There's always a \nchangelog.txt\n (\nlatest online copy here\n) which is installed together with ngSkinTools files. \n\n\nCommon issues\n\n\nAfter installing new plugin version, Maya complains that \"Invalid plugin version detected\"\n\n\nFor some reason, maya is finding the older ngSkinTools.mll file in the plugin path, and UI is warning you that there will probably be other problems to follow. \n\n\nOpen Maya plugin editor, see where it's locating ngSkinTools.mll file (or .so, if on Linux), and delete it from there. Just in case, reinstall plugin (so you're sure that only newest ngSkinTools.mll file is used). \n\n\nMaya 2015 crashes when saving a .ma file\n\n\nFixed in the \n#902 release\n\n\nI click ngSkinTools shelf button, but nothing happens\n\n\nFixed recently, please update.\n\n\nI installed ngSkinTools, but there is no new shelf\n\n\nSee next question.\n\n\nI have some other weird problem with the ngSkinTools shelf\n\n\nFrom time to time, users are reporting strange problems with the shelf, and I was not able to track it down yet. Try creating a button on another shelf using this Python code, this should open ngSkinTools main window:\n\n\nfrom ngSkinTools.ui.mainwindow import MainWindow\nMainWindow.open()\n\n\n\n\nMy mesh looks black after using paint weights\n\n\nWeights are not displayed when using paint tool\n\n\nSome problems with utility node that displays skin weights. Try deleting it, it will be inserted next time it's needed. Find a node called \"ngSkinLayerDisplay\" in mesh history and remove it, or use this Python snippet:\n\n\nfrom maya import cmds\ncmds.delete(cmds.ls(type='ngSkinLayerDisplay'))\n\n\n\n\nMy mirror is acting weird\n\n\nIs your rig properly aligned with the symmetry plane? Most of the time this means that the center of your rig should be on the X=0 (unless you use different symmetry axis). NgSkinTools don't like it when the rig is off.\n\n\nDid you review how left/right joints discover each other?\n\n\nIs your rig actually symmetrical? Try separating non-symmetrical parts into separate layers and don't mirror them. \n\n\nFeatures\n\n\nA better tutorial is needed\n\n\nPlease add more tutorials\n\n\nA known issue. It's really hard to sit down and write stuff, I'm not that kind of person, but hey, I'm compiling this FAQ, so that's something. NgSkinTools tutorials are on my \"new years resolutions\" list for year 2015.\n\n\nI still don't get layers. can you please explain them in other words?\n\n\nI've written a \ncomparison to Photoshop layers\n as a response to a user question. Can you see if that makes sense to you as well?\n\n\nAre NURBS Curves/Surfaces supported?\n\n\nNo, polygon meshes is the only type of shape supported. \n\n\nHow can I lock an influence?\n\n\nInfluence locking feature (in paint weights mode) does not exist in ngSkinTools on purpose. With layers you already have much better control over what influences and vertex weights will be changed by a paint stroke; influence locking feature would just be unnecessary complexity.\n\n\nInstead of thinking of joints you don't want to affect (which often is, \"all of the joints except selected few\"), you create a fresh layer and include only those influences you want to adjust.\n\n\nPipeline\n\n\nIs ngSkinTools compatible with game engines?\n\n\nInternally, ngSkinTools is just a tool to set weights into standard \nskinCluster\n. You should be able to export just fine. There's also an option to set max weights per joint.\n\n\nI'm ready to give the rig to the animators. Do they need ngSkinTools to be able to use the scene?\n\n\nNot necessarily. There is a menu item \nEdit | Delete Custom Nodes\n which will remove any ngSkinTools special nodes from the scene. This will delete your layers! Only use on a copy of your working file, if you intent to continue working on the skinning.\n\n\nI need to do the same, but in my script.\n\n\nUsing python:\n\n\nfrom ngSkinTools.layerUtils import LayerUtils\nLayerUtils.deleteCustomNodes()\n\n\n\n\n.. Or just delete nodes of type \nngSkinLayerData\n and \nngSkinLayerDisplay\n in your own prefered way.\n\n\nOther\n\n\nI heard ngSkinTools is open source project. Where's the source?\n\n\nIt was open source, for a short while. \nDue to multiple reasons\n it's not anymore.\n\n\nWhat are the upcomming features? When?\n\n\nI emailed requesting a feature, is it in the plan?\n\n\nPlease check the \npivotal tracker\n to understand what's planned in the near future, and what's being work on.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/index.html#faq", 
            "text": "FAQ  Installation  Is there a list of what's changed in a new release?    Common issues  After installing new plugin version, Maya complains that \"Invalid plugin version detected\"  Maya 2015 crashes when saving a .ma file  I click ngSkinTools shelf button, but nothing happens  I installed ngSkinTools, but there is no new shelf  I have some other weird problem with the ngSkinTools shelf  My mesh looks black after using paint weights  Weights are not displayed when using paint tool  My mirror is acting weird    Features  A better tutorial is needed  Please add more tutorials  I still don't get layers. can you please explain them in other words?  Are NURBS Curves/Surfaces supported?  How can I lock an influence?    Pipeline  Is ngSkinTools compatible with game engines?  I'm ready to give the rig to the animators. Do they need ngSkinTools to be able to use the scene?  I need to do the same, but in my script.    Other  I heard ngSkinTools is open source project. Where's the source?  What are the upcomming features? When?  I emailed requesting a feature, is it in the plan?", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/index.html#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/faq/index.html#is-there-a-list-of-whats-changed-in-a-new-release", 
            "text": "I always try to outline new things when announcing release in  news . There's always a  changelog.txt  ( latest online copy here ) which is installed together with ngSkinTools files.", 
            "title": "Is there a list of what's changed in a new release?"
        }, 
        {
            "location": "/faq/index.html#common-issues", 
            "text": "", 
            "title": "Common issues"
        }, 
        {
            "location": "/faq/index.html#after-installing-new-plugin-version-maya-complains-that-invalid-plugin-version-detected", 
            "text": "For some reason, maya is finding the older ngSkinTools.mll file in the plugin path, and UI is warning you that there will probably be other problems to follow.   Open Maya plugin editor, see where it's locating ngSkinTools.mll file (or .so, if on Linux), and delete it from there. Just in case, reinstall plugin (so you're sure that only newest ngSkinTools.mll file is used).", 
            "title": "After installing new plugin version, Maya complains that \"Invalid plugin version detected\""
        }, 
        {
            "location": "/faq/index.html#maya-2015-crashes-when-saving-a-ma-file", 
            "text": "Fixed in the  #902 release", 
            "title": "Maya 2015 crashes when saving a .ma file"
        }, 
        {
            "location": "/faq/index.html#i-click-ngskintools-shelf-button-but-nothing-happens", 
            "text": "Fixed recently, please update.", 
            "title": "I click ngSkinTools shelf button, but nothing happens"
        }, 
        {
            "location": "/faq/index.html#i-installed-ngskintools-but-there-is-no-new-shelf", 
            "text": "See next question.", 
            "title": "I installed ngSkinTools, but there is no new shelf"
        }, 
        {
            "location": "/faq/index.html#i-have-some-other-weird-problem-with-the-ngskintools-shelf", 
            "text": "From time to time, users are reporting strange problems with the shelf, and I was not able to track it down yet. Try creating a button on another shelf using this Python code, this should open ngSkinTools main window:  from ngSkinTools.ui.mainwindow import MainWindow\nMainWindow.open()", 
            "title": "I have some other weird problem with the ngSkinTools shelf"
        }, 
        {
            "location": "/faq/index.html#my-mesh-looks-black-after-using-paint-weights", 
            "text": "", 
            "title": "My mesh looks black after using paint weights"
        }, 
        {
            "location": "/faq/index.html#weights-are-not-displayed-when-using-paint-tool", 
            "text": "Some problems with utility node that displays skin weights. Try deleting it, it will be inserted next time it's needed. Find a node called \"ngSkinLayerDisplay\" in mesh history and remove it, or use this Python snippet:  from maya import cmds\ncmds.delete(cmds.ls(type='ngSkinLayerDisplay'))", 
            "title": "Weights are not displayed when using paint tool"
        }, 
        {
            "location": "/faq/index.html#my-mirror-is-acting-weird", 
            "text": "Is your rig properly aligned with the symmetry plane? Most of the time this means that the center of your rig should be on the X=0 (unless you use different symmetry axis). NgSkinTools don't like it when the rig is off.  Did you review how left/right joints discover each other?  Is your rig actually symmetrical? Try separating non-symmetrical parts into separate layers and don't mirror them.", 
            "title": "My mirror is acting weird"
        }, 
        {
            "location": "/faq/index.html#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/faq/index.html#a-better-tutorial-is-needed", 
            "text": "", 
            "title": "A better tutorial is needed"
        }, 
        {
            "location": "/faq/index.html#please-add-more-tutorials", 
            "text": "A known issue. It's really hard to sit down and write stuff, I'm not that kind of person, but hey, I'm compiling this FAQ, so that's something. NgSkinTools tutorials are on my \"new years resolutions\" list for year 2015.", 
            "title": "Please add more tutorials"
        }, 
        {
            "location": "/faq/index.html#i-still-dont-get-layers-can-you-please-explain-them-in-other-words", 
            "text": "I've written a  comparison to Photoshop layers  as a response to a user question. Can you see if that makes sense to you as well?", 
            "title": "I still don't get layers. can you please explain them in other words?"
        }, 
        {
            "location": "/faq/index.html#are-nurbs-curvessurfaces-supported", 
            "text": "No, polygon meshes is the only type of shape supported.", 
            "title": "Are NURBS Curves/Surfaces supported?"
        }, 
        {
            "location": "/faq/index.html#how-can-i-lock-an-influence", 
            "text": "Influence locking feature (in paint weights mode) does not exist in ngSkinTools on purpose. With layers you already have much better control over what influences and vertex weights will be changed by a paint stroke; influence locking feature would just be unnecessary complexity.  Instead of thinking of joints you don't want to affect (which often is, \"all of the joints except selected few\"), you create a fresh layer and include only those influences you want to adjust.", 
            "title": "How can I lock an influence?"
        }, 
        {
            "location": "/faq/index.html#pipeline", 
            "text": "", 
            "title": "Pipeline"
        }, 
        {
            "location": "/faq/index.html#is-ngskintools-compatible-with-game-engines", 
            "text": "Internally, ngSkinTools is just a tool to set weights into standard  skinCluster . You should be able to export just fine. There's also an option to set max weights per joint.", 
            "title": "Is ngSkinTools compatible with game engines?"
        }, 
        {
            "location": "/faq/index.html#im-ready-to-give-the-rig-to-the-animators-do-they-need-ngskintools-to-be-able-to-use-the-scene", 
            "text": "Not necessarily. There is a menu item  Edit | Delete Custom Nodes  which will remove any ngSkinTools special nodes from the scene. This will delete your layers! Only use on a copy of your working file, if you intent to continue working on the skinning.", 
            "title": "I'm ready to give the rig to the animators. Do they need ngSkinTools to be able to use the scene?"
        }, 
        {
            "location": "/faq/index.html#i-need-to-do-the-same-but-in-my-script", 
            "text": "Using python:  from ngSkinTools.layerUtils import LayerUtils\nLayerUtils.deleteCustomNodes()  .. Or just delete nodes of type  ngSkinLayerData  and  ngSkinLayerDisplay  in your own prefered way.", 
            "title": "I need to do the same, but in my script."
        }, 
        {
            "location": "/faq/index.html#other", 
            "text": "", 
            "title": "Other"
        }, 
        {
            "location": "/faq/index.html#i-heard-ngskintools-is-open-source-project-wheres-the-source", 
            "text": "It was open source, for a short while.  Due to multiple reasons  it's not anymore.", 
            "title": "I heard ngSkinTools is open source project. Where's the source?"
        }, 
        {
            "location": "/faq/index.html#what-are-the-upcomming-features-when", 
            "text": "", 
            "title": "What are the upcomming features? When?"
        }, 
        {
            "location": "/faq/index.html#i-emailed-requesting-a-feature-is-it-in-the-plan", 
            "text": "Please check the  pivotal tracker  to understand what's planned in the near future, and what's being work on.", 
            "title": "I emailed requesting a feature, is it in the plan?"
        }, 
        {
            "location": "/api/index.html", 
            "text": "API\n\n\nIf you wish to embed ngSkinTools into your python scripts, some of the Python API is documented here:\n\n\nhttp://www.ngskintools.com/documentation/api/\n\n\nFor now it just covers import/export, and low-level C++ command wrappers. If you've got some specific needs, \ndrop a note\n and we'll figure something out.", 
            "title": "API"
        }, 
        {
            "location": "/api/index.html#api", 
            "text": "If you wish to embed ngSkinTools into your python scripts, some of the Python API is documented here:  http://www.ngskintools.com/documentation/api/  For now it just covers import/export, and low-level C++ command wrappers. If you've got some specific needs,  drop a note  and we'll figure something out.", 
            "title": "API"
        }
    ]
}